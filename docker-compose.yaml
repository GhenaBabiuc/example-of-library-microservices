version: '3.8'

services:
  users-db:
    image: postgres:15
    container_name: users-db-container
    environment:
      POSTGRES_DB: users_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5431:5432"
    volumes:
      - ./users_data:/var/lib/postgresql/data
    networks:
      - library-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d users_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  books-db:
    image: postgres:15
    container_name: books-db-container
    environment:
      POSTGRES_DB: books_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - ./books_data:/var/lib/postgresql/data
    networks:
      - library-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d books_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  borrowing-db:
    image: postgres:15
    container_name: borrowing-db-container
    environment:
      POSTGRES_DB: borrowing_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - ./borrowing_data:/var/lib/postgresql/data
    networks:
      - library-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d borrowing_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-container
    ports:
      - "29092:29092"
    environment:
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    networks:
      - library-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui-container
    depends_on:
      - kafka
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - library-network

  eureka-server:
    build:
      context: ./EurekaServer
      dockerfile: Dockerfile
    container_name: eureka-server-container
    ports:
      - "8761:8761"
    networks:
      - library-network

  users-service-1:
    build:
      context: ./UsersService
      dockerfile: Dockerfile
    container_name: users-service-1-container
    ports:
      - "8083:8083"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://users-db:5432/users_db
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=password
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SERVER_PORT=8083
      - EUREKA_INSTANCE_INSTANCE_ID=users-service:${HOSTNAME}:8083
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
      - SPRING_APPLICATION_NAME=users-service
    depends_on:
      users-db:
        condition: service_healthy
      eureka-server:
        condition: service_started
    networks:
      - library-network
    restart: unless-stopped

  users-service-2:
    build:
      context: ./UsersService
      dockerfile: Dockerfile
    container_name: users-service-2-container
    ports:
      - "8093:8093"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://users-db:5432/users_db
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=password
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SERVER_PORT=8093
      - EUREKA_INSTANCE_INSTANCE_ID=users-service:${HOSTNAME}:8093
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
      - SPRING_APPLICATION_NAME=users-service
    depends_on:
      users-db:
        condition: service_healthy
      eureka-server:
        condition: service_started
    networks:
      - library-network
    restart: unless-stopped

  books-service-1:
    build:
      context: ./BooksService
      dockerfile: Dockerfile
    container_name: books-service-1-container
    ports:
      - "8081:8081"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://books-db:5432/books_db
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=password
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SERVER_PORT=8081
      - EUREKA_INSTANCE_INSTANCE_ID=books-service:${HOSTNAME}:8081
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
      - SPRING_APPLICATION_NAME=books-service
    depends_on:
      books-db:
        condition: service_healthy
      eureka-server:
        condition: service_started
    networks:
      - library-network
    restart: unless-stopped

  books-service-2:
    build:
      context: ./BooksService
      dockerfile: Dockerfile
    container_name: books-service-2-container
    ports:
      - "8091:8091"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://books-db:5432/books_db
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=password
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SERVER_PORT=8091
      - EUREKA_INSTANCE_INSTANCE_ID=books-service:${HOSTNAME}:8091
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
      - SPRING_APPLICATION_NAME=books-service
    depends_on:
      books-db:
        condition: service_healthy
      eureka-server:
        condition: service_started
    networks:
      - library-network
    restart: unless-stopped

  borrowing-service-1:
    build:
      context: ./BorrowingService
      dockerfile: Dockerfile
    container_name: borrowing-service-1-container
    ports:
      - "8082:8082"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://borrowing-db:5432/borrowing_db
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=password
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SERVER_PORT=8082
      - EUREKA_INSTANCE_INSTANCE_ID=borrowing-service:${HOSTNAME}:8082
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
      - SPRING_APPLICATION_NAME=borrowing-service
    depends_on:
      borrowing-db:
        condition: service_healthy
      eureka-server:
        condition: service_started
      users-service-1:
        condition: service_started
      books-service-1:
        condition: service_started
    networks:
      - library-network
    restart: unless-stopped

  borrowing-service-2:
    build:
      context: ./BorrowingService
      dockerfile: Dockerfile
    container_name: borrowing-service-2-container
    ports:
      - "8092:8092"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://borrowing-db:5432/borrowing_db
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=password
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SERVER_PORT=8092
      - EUREKA_INSTANCE_INSTANCE_ID=borrowing-service:${HOSTNAME}:8092
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
      - SPRING_APPLICATION_NAME=borrowing-service
    depends_on:
      borrowing-db:
        condition: service_healthy
      eureka-server:
        condition: service_started
      users-service-1:
        condition: service_started
      books-service-1:
        condition: service_started
    networks:
      - library-network
    restart: unless-stopped

  api-gateway:
    build:
      context: ./ApiGateway
      dockerfile: Dockerfile
    container_name: api-gateway-container
    ports:
      - "8080:8080"
    environment:
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
    depends_on:
      eureka-server:
        condition: service_started
      users-service-1:
        condition: service_started
      users-service-2:
        condition: service_started
      books-service-1:
        condition: service_started
      books-service-2:
        condition: service_started
      borrowing-service-1:
        condition: service_started
      borrowing-service-2:
        condition: service_started
    networks:
      - library-network
    restart: unless-stopped

  notification-service:
    build:
      context: ./NotificationService
      dockerfile: Dockerfile
    container_name: notification-service-container
    ports:
      - "8084:8084"
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_CONSUMER_GROUP_ID=notification-service-group
      - SPRING_MAIL_HOST=smtp.yandex.ru
      - SPRING_MAIL_PORT=587
      - SPRING_MAIL_USERNAME=example@yandex.ru
      - SPRING_MAIL_PASSWORD=example
      - NOTIFICATION_EMAIL_FROM=example@yandex.ru
      - NOTIFICATION_EMAIL_ENABLED=true
    networks:
      - library-network
    restart: unless-stopped

volumes:
  users_data:
  books_data:
  borrowing_data:

networks:
  library-network:
    driver: bridge
